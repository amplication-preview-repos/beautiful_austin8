/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PetSitterProfileService } from "../petSitterProfile.service";
import { PetSitterProfileCreateInput } from "./PetSitterProfileCreateInput";
import { PetSitterProfile } from "./PetSitterProfile";
import { PetSitterProfileFindManyArgs } from "./PetSitterProfileFindManyArgs";
import { PetSitterProfileWhereUniqueInput } from "./PetSitterProfileWhereUniqueInput";
import { PetSitterProfileUpdateInput } from "./PetSitterProfileUpdateInput";

export class PetSitterProfileControllerBase {
  constructor(protected readonly service: PetSitterProfileService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PetSitterProfile })
  async createPetSitterProfile(
    @common.Body() data: PetSitterProfileCreateInput
  ): Promise<PetSitterProfile> {
    return await this.service.createPetSitterProfile({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PetSitterProfile] })
  @ApiNestedQuery(PetSitterProfileFindManyArgs)
  async petSitterProfiles(
    @common.Req() request: Request
  ): Promise<PetSitterProfile[]> {
    const args = plainToClass(PetSitterProfileFindManyArgs, request.query);
    return this.service.petSitterProfiles({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PetSitterProfile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async petSitterProfile(
    @common.Param() params: PetSitterProfileWhereUniqueInput
  ): Promise<PetSitterProfile | null> {
    const result = await this.service.petSitterProfile({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PetSitterProfile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePetSitterProfile(
    @common.Param() params: PetSitterProfileWhereUniqueInput,
    @common.Body() data: PetSitterProfileUpdateInput
  ): Promise<PetSitterProfile | null> {
    try {
      return await this.service.updatePetSitterProfile({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PetSitterProfile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePetSitterProfile(
    @common.Param() params: PetSitterProfileWhereUniqueInput
  ): Promise<PetSitterProfile | null> {
    try {
      return await this.service.deletePetSitterProfile({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
