/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PetSitterProfile } from "./PetSitterProfile";
import { PetSitterProfileCountArgs } from "./PetSitterProfileCountArgs";
import { PetSitterProfileFindManyArgs } from "./PetSitterProfileFindManyArgs";
import { PetSitterProfileFindUniqueArgs } from "./PetSitterProfileFindUniqueArgs";
import { DeletePetSitterProfileArgs } from "./DeletePetSitterProfileArgs";
import { PetSitterProfileService } from "../petSitterProfile.service";
@graphql.Resolver(() => PetSitterProfile)
export class PetSitterProfileResolverBase {
  constructor(protected readonly service: PetSitterProfileService) {}

  async _petSitterProfilesMeta(
    @graphql.Args() args: PetSitterProfileCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PetSitterProfile])
  async petSitterProfiles(
    @graphql.Args() args: PetSitterProfileFindManyArgs
  ): Promise<PetSitterProfile[]> {
    return this.service.petSitterProfiles(args);
  }

  @graphql.Query(() => PetSitterProfile, { nullable: true })
  async petSitterProfile(
    @graphql.Args() args: PetSitterProfileFindUniqueArgs
  ): Promise<PetSitterProfile | null> {
    const result = await this.service.petSitterProfile(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PetSitterProfile)
  async deletePetSitterProfile(
    @graphql.Args() args: DeletePetSitterProfileArgs
  ): Promise<PetSitterProfile | null> {
    try {
      return await this.service.deletePetSitterProfile(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
