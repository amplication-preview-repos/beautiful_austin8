/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { HireRequestService } from "../hireRequest.service";
import { HireRequestCreateInput } from "./HireRequestCreateInput";
import { HireRequest } from "./HireRequest";
import { HireRequestFindManyArgs } from "./HireRequestFindManyArgs";
import { HireRequestWhereUniqueInput } from "./HireRequestWhereUniqueInput";
import { HireRequestUpdateInput } from "./HireRequestUpdateInput";

export class HireRequestControllerBase {
  constructor(protected readonly service: HireRequestService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: HireRequest })
  async createHireRequest(
    @common.Body() data: HireRequestCreateInput
  ): Promise<HireRequest> {
    return await this.service.createHireRequest({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [HireRequest] })
  @ApiNestedQuery(HireRequestFindManyArgs)
  async hireRequests(@common.Req() request: Request): Promise<HireRequest[]> {
    const args = plainToClass(HireRequestFindManyArgs, request.query);
    return this.service.hireRequests({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: HireRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async hireRequest(
    @common.Param() params: HireRequestWhereUniqueInput
  ): Promise<HireRequest | null> {
    const result = await this.service.hireRequest({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: HireRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateHireRequest(
    @common.Param() params: HireRequestWhereUniqueInput,
    @common.Body() data: HireRequestUpdateInput
  ): Promise<HireRequest | null> {
    try {
      return await this.service.updateHireRequest({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: HireRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteHireRequest(
    @common.Param() params: HireRequestWhereUniqueInput
  ): Promise<HireRequest | null> {
    try {
      return await this.service.deleteHireRequest({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
