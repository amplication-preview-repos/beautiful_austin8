/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Bill } from "./Bill";
import { BillCountArgs } from "./BillCountArgs";
import { BillFindManyArgs } from "./BillFindManyArgs";
import { BillFindUniqueArgs } from "./BillFindUniqueArgs";
import { DeleteBillArgs } from "./DeleteBillArgs";
import { BillService } from "../bill.service";
@graphql.Resolver(() => Bill)
export class BillResolverBase {
  constructor(protected readonly service: BillService) {}

  async _billsMeta(
    @graphql.Args() args: BillCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Bill])
  async bills(@graphql.Args() args: BillFindManyArgs): Promise<Bill[]> {
    return this.service.bills(args);
  }

  @graphql.Query(() => Bill, { nullable: true })
  async bill(@graphql.Args() args: BillFindUniqueArgs): Promise<Bill | null> {
    const result = await this.service.bill(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Bill)
  async deleteBill(@graphql.Args() args: DeleteBillArgs): Promise<Bill | null> {
    try {
      return await this.service.deleteBill(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
