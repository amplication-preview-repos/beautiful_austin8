/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PetFoodService } from "../petFood.service";
import { PetFoodCreateInput } from "./PetFoodCreateInput";
import { PetFood } from "./PetFood";
import { PetFoodFindManyArgs } from "./PetFoodFindManyArgs";
import { PetFoodWhereUniqueInput } from "./PetFoodWhereUniqueInput";
import { PetFoodUpdateInput } from "./PetFoodUpdateInput";

export class PetFoodControllerBase {
  constructor(protected readonly service: PetFoodService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PetFood })
  async createPetFood(
    @common.Body() data: PetFoodCreateInput
  ): Promise<PetFood> {
    return await this.service.createPetFood({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PetFood] })
  @ApiNestedQuery(PetFoodFindManyArgs)
  async petFoods(@common.Req() request: Request): Promise<PetFood[]> {
    const args = plainToClass(PetFoodFindManyArgs, request.query);
    return this.service.petFoods({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PetFood })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async petFood(
    @common.Param() params: PetFoodWhereUniqueInput
  ): Promise<PetFood | null> {
    const result = await this.service.petFood({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PetFood })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePetFood(
    @common.Param() params: PetFoodWhereUniqueInput,
    @common.Body() data: PetFoodUpdateInput
  ): Promise<PetFood | null> {
    try {
      return await this.service.updatePetFood({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PetFood })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePetFood(
    @common.Param() params: PetFoodWhereUniqueInput
  ): Promise<PetFood | null> {
    try {
      return await this.service.deletePetFood({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
